// <auto-generated />
using System;
using AddressBook.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AddressBook.Api.Migrations
{
    [DbContext(typeof(AddressBookDbContext))]
    [Migration("20210128153817_InitialSeedData")]
    partial class InitialSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("AddressBook.Api.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("contact_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("country");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("region");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_address");

                    b.HasKey("ContactId")
                        .HasName("pk_contacts");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("AddressBook.Api.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_address");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            EmailAddress = "admin@admin.com",
                            PasswordHash = new byte[] { 132, 144, 86, 243, 57, 41, 113, 188, 159, 115, 209, 53, 163, 75, 235, 62, 60, 45, 52, 24, 236, 170, 203, 223, 177, 200, 171, 186, 86, 14, 4, 49, 15, 21, 106, 183, 27, 244, 170, 49, 133, 69, 50, 232, 132, 13, 12, 134, 111, 40, 124, 145, 162, 7, 185, 210, 75, 25, 119, 133, 98, 180, 159, 109 },
                            PasswordSalt = new byte[] { 133, 219, 46, 64, 218, 149, 170, 106, 118, 15, 198, 220, 221, 186, 198, 248, 148, 232, 140, 50, 26, 251, 59, 209, 5, 19, 24, 206, 97, 146, 99, 37, 33, 200, 73, 162, 76, 78, 253, 111, 197, 29, 204, 52, 2, 29, 148, 246, 93, 211, 129, 211, 176, 216, 134, 42, 70, 7, 71, 22, 107, 80, 183, 28, 149, 223, 85, 20, 55, 226, 196, 52, 86, 246, 43, 229, 146, 235, 43, 23, 204, 52, 176, 200, 178, 34, 247, 0, 91, 227, 89, 74, 207, 137, 47, 192, 59, 251, 12, 189, 189, 248, 25, 127, 251, 179, 36, 178, 136, 148, 136, 232, 0, 223, 66, 153, 255, 163, 145, 39, 175, 73, 237, 28, 236, 245, 204, 13 }
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
